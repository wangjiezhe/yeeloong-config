From 8f13257d221e20dabbfb7a01159dcbfc794ac449 Mon Sep 17 00:00:00 2001
From: Icenowy Zheng <icenowy@aosc.io>
Date: Mon, 17 Aug 2020 16:02:15 +0800
Subject: [PATCH] godson_memcpy

Signed-off-by: Icenowy Zheng <icenowy@aosc.io>
---
 src/Makefile.am     |   4 +-
 src/godson_memcpy.S | 148 ++++++++++++++++++++++++++++++++++++++++++++
 src/godson_memcpy.h |  11 ++++
 src/smi_exa.c       |   6 +-
 src/smi_video.c     |   8 ++-
 src/smi_xaa.c       |   4 +-
 6 files changed, 174 insertions(+), 7 deletions(-)
 create mode 100644 src/godson_memcpy.S
 create mode 100644 src/godson_memcpy.h

diff --git a/src/Makefile.am b/src/Makefile.am
index 77b3b85..ea95664 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -53,4 +53,6 @@ siliconmotion_drv_la_SOURCES = \
 	 smilynx_hw.c \
 	 smilynx.h \
 	 smi501_crtc.c \
-	 smi501_output.c
+	 smi501_output.c \
+	 godson_memcpy.h \
+	 godson_memcpy.S
diff --git a/src/godson_memcpy.S b/src/godson_memcpy.S
new file mode 100644
index 0000000..3a27f0f
--- /dev/null
+++ b/src/godson_memcpy.S
@@ -0,0 +1,148 @@
+/* Copyright (C) 2002, 2003 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Hartvig Ekner <hartvige@mips.com>, 2002.
+   Ported to mips3 n32/n64 by Alexandre Oliva <aoliva@redhat.com>
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#if __MIPSEL__
+
+#include <endian.h>
+#include <sys/asm.h>
+#include <sys/regdef.h>
+#include <sys/fpregdef.h>
+
+/* void *godson_memcpy(void *s1, const void *s2, size_t n);
+	
+   This could probably be optimized further.  */
+
+#if __BYTE_ORDER == __BIG_ENDIAN
+#  define LDHI	ldl		/* high part is left in big-endian	*/
+#  define SDHI	sdl		/* high part is left in big-endian	*/
+#  define LDLO	ldr		/* low part is right in big-endian	*/
+#  define SDLO	sdr		/* low part is right in big-endian	*/
+#else
+#  define LDHI	ldr		/* high part is right in little-endian	*/
+#  define SDHI	sdr		/* high part is right in little-endian	*/
+#  define LDLO	ldl		/* low part is left in little-endian	*/
+#  define SDLO	sdl		/* low part is left in little-endian	*/
+#endif
+
+/* ENTRY (godson_memcpy)*/
+	.global	godson_memcpy
+	.ent	godson_memcpy
+godson_memcpy:
+	.set	noreorder
+	.set	mips3
+
+	slti	t0, a2, 16		# Less than 16?
+	bne	t0, zero, last16
+	move	v0, a0			# Setup exit value before too late
+
+	xor	t0, a1, a0		# Find a0/a1 displacement
+	andi	t0, 0x7
+	bne	t0, zero, shift		# Go handle the unaligned case
+	PTR_SUBU t1, zero, a1
+	andi	t1, 0x7			# a0/a1 are aligned, but are we
+	beq	t1, zero, chk8w		#  starting in the middle of a word?
+	PTR_SUBU a2, t1
+	LDHI	t0, 0(a1)		# Yes we are... take care of that
+	PTR_ADDU a1, t1
+	SDHI	t0, 0(a0)
+	PTR_ADDU a0, t1
+
+chk8w:
+	andi	t0, a2, 0x3f		# 64 or more bytes left?
+	beq	t0, a2, chk1w
+	PTR_SUBU a3, a2, t0		# Yes
+	PTR_ADDU a3, a1			# a3 = end address of loop
+	move	a2, t0			# a2 = what will be left after loop
+lop8w:	
+	ld	t0,  0(a1)		# Loop taking 8 words at a time
+	ld	t1,  8(a1)
+	ld	t2, 16(a1)
+	ld	t3, 24(a1)
+	ld	ta0, 32(a1)
+	ld	ta1, 40(a1)
+	ld	ta2, 48(a1)
+	ld	ta3, 56(a1)
+	PTR_ADDIU a0, 64
+	PTR_ADDIU a1, 64
+	sd	t0, -64(a0)
+	sd	t1, -56(a0)
+	sd	t2, -48(a0)
+	sd	t3, -40(a0)
+	sd	ta0, -32(a0)
+	sd	ta1, -24(a0)
+	sd	ta2, -16(a0)
+	bne	a1, a3, lop8w
+	sd	ta3,  -8(a0)
+
+chk1w:
+	andi	t0, a2, 0x7		# 8 or more bytes left?
+	beq	t0, a2, last16
+	PTR_SUBU a3, a2, t0		# Yes, handle them one dword at a time
+	PTR_ADDU a3, a1			# a3 again end address
+	move	a2, t0
+lop1w:
+	ld	t0, 0(a1)
+	PTR_ADDIU a0, 8
+	PTR_ADDIU a1, 8
+	bne	a1, a3, lop1w
+	sd	t0, -8(a0)
+
+last16:
+	blez	a2, lst16e		# Handle last 16 bytes, one at a time
+	PTR_ADDU a3, a2, a1
+lst16l:
+	lb	t0, 0(a1)
+	PTR_ADDIU a0, 1
+	PTR_ADDIU a1, 1
+	bne	a1, a3, lst16l
+	sb	t0, -1(a0)
+lst16e:
+	jr	ra			# Bye, bye
+	nop
+
+shift:
+	PTR_SUBU a3, zero, a0		# Src and Dest unaligned 
+	andi	a3, 0x7			#  (unoptimized case...)
+	beq	a3, zero, shft1
+	PTR_SUBU a2, a3			# a2 = bytes left
+	LDHI	t0, 0(a1)		# Take care of first odd part
+	LDLO	t0, 7(a1)
+	PTR_ADDU a1, a3
+	SDHI	t0, 0(a0)
+	PTR_ADDU a0, a3
+shft1:
+	andi	t0, a2, 0x7
+	PTR_SUBU a3, a2, t0
+	PTR_ADDU a3, a1
+shfth:
+	LDHI	t1, 0(a1)		# Limp through, dword by dword
+	LDLO	t1, 7(a1)
+	PTR_ADDIU a0, 8
+	PTR_ADDIU a1, 8
+	bne	a1, a3, shfth
+	sd	t1, -8(a0)
+	b	last16		# Handle anything which may be left
+	move	a2, t0
+
+	.set	reorder
+	.end	godson_memcpy
+/* END (memcpy) */
+
+#endif
diff --git a/src/godson_memcpy.h b/src/godson_memcpy.h
new file mode 100644
index 0000000..69998dd
--- /dev/null
+++ b/src/godson_memcpy.h
@@ -0,0 +1,11 @@
+#ifndef _GODSON_MEMCPY_H
+#define _GODSON_MEMCPY_H
+
+#if __MIPSEL__
+void *godson_memcpy(void *s1, const void *s2, size_t n);
+#else
+#include <string.h>
+#define godson_memcpy(s1, s2, n) memcpy(s1, s2, n)
+#endif
+
+#endif
diff --git a/src/smi_exa.c b/src/smi_exa.c
index 67a6fdd..b0b7f56 100644
--- a/src/smi_exa.c
+++ b/src/smi_exa.c
@@ -27,6 +27,8 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 
 #include "smi.h"
 
+#include "godson_memcpy.h"
+
 #if SMI501_CLI_DEBUG
 # include "smi_501.h"
 # undef WRITE_DPR
@@ -497,7 +499,7 @@ SMI_DownloadFromScreen(PixmapPtr pSrc, int x, int y, int w, int h,
     w   *= pSrc->drawable.bitsPerPixel/8;
 
     while (h--) {
-	memcpy(dst, src, w);
+	godson_memcpy(dst, src, w);
 	src += src_pitch;
 	dst += dst_pitch;
     }
@@ -573,7 +575,7 @@ SMI_UploadToScreen(PixmapPtr pDst, int x, int y, int w, int h,
 #endif
 
     while (h--) {
-	memcpy(pSmi->DataPortBase, src, aligned_pitch);
+	godson_memcpy(pSmi->DataPortBase, src, aligned_pitch);
 	src += src_pitch;
     }
 
diff --git a/src/smi_video.c b/src/smi_video.c
index 27df68d..26c3280 100644
--- a/src/smi_video.c
+++ b/src/smi_video.c
@@ -58,6 +58,8 @@ authorization from the XFree86 Project and silicon Motion.
 
 #include "xf86Crtc.h"
 
+#include "godson_memcpy.h"
+
 #undef MIN
 #undef ABS
 #undef CLAMP
@@ -2302,21 +2304,21 @@ CopyYV12ToVideoMem(unsigned char *src1, unsigned char *src2,
 
     /* copy 1 data */
     while (j -- > 0) {
-	memcpy(dst, src1, width);
+	godson_memcpy(dst, src1, width);
 	src1 += src1Pitch;
 	dst += dstPitch;
     }
     /* copy 2 data */
     j = height / 2;
     while (j -- > 0) {
-	memcpy(dst, src2, width / 2);
+	godson_memcpy(dst, src2, width / 2);
 	src2 += src23Pitch;
 	dst += dstPitch / 2;
     }
     /* copy 3 data */
     j = height / 2;
     while (j -- > 0) {
-	memcpy(dst, src3, width / 2);
+	godson_memcpy(dst, src3, width / 2);
 	src3 += src23Pitch;
 	dst += dstPitch / 2;
     }
diff --git a/src/smi_xaa.c b/src/smi_xaa.c
index cd861a1..4868f0e 100644
--- a/src/smi_xaa.c
+++ b/src/smi_xaa.c
@@ -32,6 +32,8 @@ authorization from the XFree86 Project and silicon Motion.
 #include "smi.h"
 #include "smi_501.h"
 
+#include "godson_memcpy.h"
+
 #ifdef HAVE_XAA_H
 
 #include "miline.h"
@@ -593,7 +595,7 @@ SMI_SetupForColor8x8PatternFill(ScrnInfoPtr pScrn, int patx, int paty, int rop,
 
 	WaitIdle();
 	WRITE_DPR(pSmi, 0x0C, SMI_BITBLT | SMI_COLOR_PATTERN);
-	memcpy(pSmi->DataPortBase, pattern, 8 * pSmi->Bpp * 8);
+	godson_memcpy(pSmi->DataPortBase, pattern, 8 * pSmi->Bpp * 8);
     } else {
 	if (pScrn->bitsPerPixel == 24) {
 	    patx *= 3;
-- 
2.27.0


